I"qŸ<h2 id="java-iÌ‡le-quadtree-kullanarak-gÃ¶rsel-analizi">Java Ä°le Quadtree Kullanarak GÃ¶rsel Analizi</h2>

<p>Gerekli olan bÃ¼tÃ¼n bilgiler ÅŸu pdfâ€™ten okunabilir: <a href="https://github.com/caglayandemirci/QuadtreeJava/blob/master/hw4SM19.pdf">Assignment4SM19.pdf</a></p>

<p>Program uzun sÃ¼re Ã§alÄ±ÅŸÄ±yor, muhtemelen Ã§ok fazla String analizi kodu yazdÄ±ÄŸÄ±m iÃ§in. UmarÄ±m bir ara bu koda geri dÃ¶nÃ¼p bir iyileÅŸtirme yapacaÄŸÄ±m. Upgrade geldiÄŸi zaman buraya onu da not ederim.</p>

<p><br /><br />
GÃ¶rev ile birlikte verilen PPM gÃ¶rsel dosyasÄ± olan kÄ±z Ã§ocuÄŸu resmi:</p>

<p><img src="https://i.ibb.co/3zrzwTL/Screenshot-from-2019-08-12-19-50-46.png" alt="" /></p>

<p><br /><br />
Resmi programÄ± Ã§alÄ±ÅŸtÄ±rarak analiz ettiÄŸimde ortaya Ã§Ä±kan gÃ¶rseller ise ÅŸunlar (program tam istediÄŸim ÅŸekilde Ã§alÄ±ÅŸÄ±yor):</p>

<p><img src="https://i.ibb.co/d780GFq/Screenshot-from-2019-08-12-19-50-33.png" alt="" /></p>

<p><img src="https://i.ibb.co/vHKWqrM/Screenshot-from-2019-08-12-19-50-36.png" alt="" /></p>

<p><img src="https://i.ibb.co/WDpSMBD/Screenshot-from-2019-08-12-19-50-38.png" alt="" /></p>

<p><img src="https://i.ibb.co/VHShZgt/Screenshot-from-2019-08-12-19-50-39.png" alt="" /></p>

<p><img src="https://i.ibb.co/rptnZ0x/Screenshot-from-2019-08-12-19-50-39-1.png" alt="" /></p>

<p><img src="https://i.ibb.co/JKHbWkP/Screenshot-from-2019-08-12-19-50-40.png" alt="" /></p>

<p><img src="https://i.ibb.co/PzGYYVc/Screenshot-from-2019-08-12-19-50-41.png" alt="" /></p>

<p><img src="https://i.ibb.co/Rgmvw1r/Screenshot-from-2019-08-12-19-50-43.png" alt="" /></p>

<p><br /><br />
Bu program temelinde istenen ÅŸekilde filtreleme yapÄ±labilir. Ben bir monochromatic (grileÅŸtirme / siyah-beyazlaÅŸtÄ±rma, <em>Greyscale</em>) bir de negatifleÅŸtirme yazdÄ±m.</p>

<p><img src="https://i.ibb.co/nQYVwQy/Screenshot-from-2019-08-12-19-50-48.png" alt="" /></p>

<p><img src="https://i.ibb.co/zmWYVYL/Screenshot-from-2019-08-12-19-50-49.png" alt="" /></p>

<p><br /><br />
Bir de edge detection diye bir iÅŸlem var, bu da kayda deÄŸer bir data deÄŸiÅŸikliÄŸi olduÄŸunda gÃ¶rselin ilgili kÄ±sÄ±mlarÄ±nÄ± beyaz ile iÅŸaretliyor. Bu iÅŸlem, bÃ¼yÃ¼k gÃ¶rsel datalarÄ±nÄ± analiz eden programlar iÃ§in (yani <em>introduction to big data science on images</em> desek abartmÄ±ÅŸ olmayÄ±z) kullanÄ±labiliyor.</p>

<p><img src="https://i.ibb.co/5x5f88b/Screenshot-from-2019-08-12-19-50-50.png" alt="" /></p>

<p><br /><br />
README ve kodlar:</p>

<p><strong>README.md</strong>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># QuadtreeJava
Introduction to Image Processing via QuadTree data stucture using Java

### Name

R. Ã‡aÄŸlayan Demirci

### Compilation and run:

Standart java compilation with the main class name which is Driver.java, with 5 arguments.

```
  ~$ javac *.java
```

As arguments, it is essential that number of them will be exactly 5, as follows:
- An input file name which is the .ppm format image, exactly after a flag -i. Input file must contain ".ppm" at the end.
- An output file name, exatcly after a flag -o. This sould not be appended by ".ppm"
- To get 8 compressed versions of the image, one of the arguments must be -c
- To get edge-detected version of the image, one of the arguments must be -e
IMPORTANT: -c and -e must not be used together. Each command has to contain one of them each time.
- Order of the flags do not matter, as long as -i and -o are followed by their proper file names.

So:

```
  ~$ java Driver -i inputExample.ppm -c -o -outputExample
  ~$ java Driver -i inputExample.ppm -e -o -outputExample
```

### Known bugs and limitations:

- Program execution takes a very long time. For instance, getting 8 compressed versions of a 512x512 file takes approximately 10-16 minutes (i7 CPU). It means one process, including edge detection, takes nearly 1-2 minutes.
- I did not control how many times or how many depth node I get while printing 8 compressed files. Program, prints automatically 4, 4^2, 4^3... 4^8 smallest necessary squares. That means, if the image is small enough, at some point program may prints images that have same resolution. Or, in the opposite situation, even 8th version could not reach the highest resolution (the case that tree's smallest square = 1 pixel). But all can be handled. 4^j values in the for loop can be changed in my Driver program where the part beginning "j values can be changed willingly". It is 1&lt;=j&lt;9 by default.
- Threshold value is 5 by default. Prints proper images when it is like that. It can be changed, either.

### Contents:

- Driver.java: Main method of the program.
- QuadTree.java: QuadTree class, Node inner class, their methods.
- Image.java: Image class, Pixel inner class, their methods.
- ExampleOutputs: A directory that includes 12 .ppm files I have tested my program with a ppm image. One of the files is the original one, and the results are; one greyscaled, one negative, one edge detected, and 8 of compressed versions of the original file going from the lowest resolution to the highest, 1 to 8.
- README
</code></pre></div></div>

<p><strong>QuadTree.java</strong>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuadTree</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Image</span> <span class="n">img</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Node</span> <span class="n">root</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">tree_data</span><span class="o">;</span>


    <span class="kd">public</span> <span class="nf">QuadTree</span><span class="o">(</span><span class="nc">Image</span> <span class="n">img</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">img</span> <span class="o">=</span> <span class="n">img</span><span class="o">;</span>

        <span class="c1">// matrix index starts with 0, thus (get dimension - 1)</span>
        <span class="kt">int</span> <span class="n">dimension</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="na">getDimension</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// image will be given as square</span>
        <span class="c1">// so no need for height and width, just dimension instead</span>
        <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span> <span class="n">dimension</span><span class="o">,</span> <span class="n">dimension</span><span class="o">);</span>
        <span class="n">root</span><span class="o">.</span><span class="na">parent</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">divide</span><span class="o">(</span><span class="kt">int</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">rec_divide</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">threshold</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">rec_divide</span><span class="o">(</span><span class="nc">Node</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// assist function for divide:</span>
        <span class="c1">// recursive divide method</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">i1</span> <span class="o">!=</span> <span class="n">n</span><span class="o">.</span><span class="na">i2</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">j1</span> <span class="o">!=</span> <span class="n">n</span><span class="o">.</span><span class="na">j2</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">isExternal</span><span class="o">())</span> <span class="o">{</span>

                    <span class="c1">// asks image class if this is necessary or not</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">img</span><span class="o">.</span><span class="na">decider_by_threshold</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">n</span><span class="o">.</span><span class="na">i1</span><span class="o">,</span> <span class="n">n</span><span class="o">.</span><span class="na">j1</span><span class="o">,</span> <span class="n">n</span><span class="o">.</span><span class="na">i2</span><span class="o">,</span> <span class="n">n</span><span class="o">.</span><span class="na">j2</span><span class="o">))</span>
                        <span class="n">n</span><span class="o">.</span><span class="na">divide_node</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="n">rec_divide</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">nw</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
                <span class="n">rec_divide</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">sw</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
                <span class="n">rec_divide</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">ne</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
                <span class="n">rec_divide</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">se</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="nc">Image</span> <span class="nf">compress</span><span class="o">(</span><span class="kt">int</span> <span class="n">depth</span><span class="o">,</span> <span class="nc">String</span> <span class="n">output_file_name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">img</span><span class="o">.</span><span class="na">compress</span><span class="o">(</span><span class="n">tree_data_by_depth</span><span class="o">(</span><span class="n">depth</span><span class="o">),</span> <span class="n">depth</span><span class="o">,</span> <span class="n">output_file_name</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">tree_data_by_depth</span><span class="o">(</span><span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">tree_data</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">rec_tree_data_by_depth</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">tree_data</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">rec_tree_data_by_depth</span><span class="o">(</span><span class="nc">Node</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// assist function for tree_data_by_depth:</span>
        <span class="c1">// recursive displaying index data of the tree by depth method</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">depth</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="n">depth</span><span class="o">)</span>
                <span class="n">tree_data</span> <span class="o">+=</span> <span class="n">n</span><span class="o">.</span><span class="na">i1</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">n</span><span class="o">.</span><span class="na">j1</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span>
                             <span class="n">n</span><span class="o">.</span><span class="na">i2</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">n</span><span class="o">.</span><span class="na">j2</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">;</span>
            <span class="n">rec_tree_data_by_depth</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">nw</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
            <span class="n">rec_tree_data_by_depth</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">ne</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
            <span class="n">rec_tree_data_by_depth</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">sw</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
            <span class="n">rec_tree_data_by_depth</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">se</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
        <span class="o">}</span>

    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">depth</span><span class="o">(</span><span class="nc">Node</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// actually a node method</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">root</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">depth</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">parent</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">height</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// assumed depth(root) is 0</span>
        <span class="c1">// thus 4^(tree.height()) is #of Pixels</span>
        <span class="nc">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">isInternal</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">nw</span><span class="o">;</span>
            <span class="n">count</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">display</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">rec_display</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">rec_display</span><span class="o">(</span><span class="nc">Node</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// assist function for display:</span>
        <span class="c1">// recursive display method</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
            <span class="n">rec_display</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">nw</span><span class="o">);</span>
            <span class="n">rec_display</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">sw</span><span class="o">);</span>
            <span class="n">rec_display</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">ne</span><span class="o">);</span>
            <span class="n">rec_display</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">se</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
        <span class="c1">// holds basically four integers as (i1, j1), (i2, j2)</span>
        <span class="c1">// those represent northwest and southeast indexes</span>
        <span class="c1">// (in the matrix in Image class) of the sub image.</span>

        <span class="kd">private</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="n">i2</span><span class="o">,</span> <span class="n">j1</span><span class="o">,</span> <span class="n">j2</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">Node</span> <span class="n">parent</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">Node</span> <span class="n">nw</span><span class="o">,</span> <span class="n">ne</span><span class="o">,</span> <span class="n">sw</span><span class="o">,</span> <span class="n">se</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">i1</span> <span class="o">=</span> <span class="n">i1</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">i2</span> <span class="o">=</span> <span class="n">i2</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">j1</span> <span class="o">=</span> <span class="n">j1</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">j2</span> <span class="o">=</span> <span class="n">j2</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">void</span> <span class="nf">divide_node</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">Node</span> <span class="n">nw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">i1</span><span class="o">,</span> <span class="n">j1</span><span class="o">,</span> <span class="o">(</span><span class="n">i1</span> <span class="o">+</span> <span class="n">i2</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="o">(</span><span class="n">j1</span> <span class="o">+</span> <span class="n">j2</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
            <span class="nc">Node</span> <span class="n">ne</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">i1</span><span class="o">,</span> <span class="o">(</span><span class="n">j1</span> <span class="o">+</span> <span class="n">j2</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="o">(</span><span class="n">i1</span> <span class="o">+</span> <span class="n">i2</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="n">j2</span><span class="o">);</span>
            <span class="nc">Node</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">((</span><span class="n">i1</span> <span class="o">+</span> <span class="n">i2</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">j1</span><span class="o">,</span> <span class="n">i2</span><span class="o">,</span> <span class="o">(</span><span class="n">j1</span> <span class="o">+</span> <span class="n">j2</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
            <span class="nc">Node</span> <span class="n">se</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">((</span><span class="n">i1</span> <span class="o">+</span> <span class="n">i2</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="o">(</span><span class="n">j1</span> <span class="o">+</span> <span class="n">j2</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">,</span> <span class="n">i2</span><span class="o">,</span> <span class="n">j2</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">nw</span> <span class="o">=</span> <span class="n">nw</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">ne</span> <span class="o">=</span> <span class="n">ne</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">sw</span> <span class="o">=</span> <span class="n">sw</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">se</span> <span class="o">=</span> <span class="n">se</span><span class="o">;</span>
            <span class="n">nw</span><span class="o">.</span><span class="na">parent</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
            <span class="n">ne</span><span class="o">.</span><span class="na">parent</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
            <span class="n">sw</span><span class="o">.</span><span class="na">parent</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
            <span class="n">se</span><span class="o">.</span><span class="na">parent</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">boolean</span> <span class="nf">isExternal</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">nw</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span>
        <span class="kt">boolean</span> <span class="nf">isInternal</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="o">!</span><span class="k">this</span><span class="o">.</span><span class="na">isExternal</span><span class="o">();</span> <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">depth</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">+</span><span class="s">" ("</span> <span class="o">+</span> <span class="n">i1</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">j1</span> <span class="o">+</span> <span class="s">"), "</span>  <span class="o">+</span> <span class="s">"("</span> <span class="o">+</span> <span class="n">i2</span> <span class="o">+</span> <span class="s">", "</span> <span class="o">+</span> <span class="n">j2</span> <span class="o">+</span><span class="s">")"</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p><strong>Image.java</strong>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Image</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">format_is_P3</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">width</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Pixel</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">file_name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Pixel</span><span class="o">[][]</span> <span class="nf">getMatrix</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">matrix</span><span class="o">;</span> <span class="o">}</span>

    <span class="c1">// the image will be square</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getDimension</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">height</span><span class="o">;</span> <span class="o">}</span>

    <span class="c1">// sets one pixel each time</span>
    <span class="c1">// instead implementing nonsense "setMatrix"</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPixel</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span> <span class="n">g</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Pixel</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">,</span><span class="n">r</span><span class="o">,</span><span class="n">g</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="nf">Image</span><span class="o">(</span><span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">format_is_P3</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="n">height</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">width</span> <span class="o">=</span> <span class="n">width</span><span class="o">;</span>
        <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">[</span><span class="n">height</span><span class="o">][</span><span class="n">width</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Image</span><span class="o">(</span><span class="nc">String</span> <span class="n">file_name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">file_name</span> <span class="o">=</span> <span class="n">file_name</span><span class="o">;</span>
        <span class="nc">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>

            <span class="c1">// I tried to read file via BufferedReader.readLine()</span>
            <span class="c1">// but it came up with exception because</span>
            <span class="c1">// huge file lines can be broken in some instances</span>
            <span class="c1">// so I read and write all files by Scanner class</span>
            <span class="c1">// to use hasNext()</span>
            <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">file_name</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="c1">// implementing image features</span>
        <span class="k">this</span><span class="o">.</span><span class="na">format_is_P3</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"P3"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">format_is_P3</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
                    <span class="s">"image is not .ppm P3 format!\n"</span>
            <span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">width</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">height</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">[</span><span class="n">height</span><span class="o">][</span><span class="n">width</span><span class="o">];</span>
        <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span> <span class="c1">// 255</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="nc">Pixel</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(),</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(),</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">());</span>
                    <span class="n">p</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="n">p</span><span class="o">.</span><span class="na">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                    <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">disturb</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// re-spreading the contents of the Image pixels with</span>
        <span class="c1">// picked data as [i][j] rgb(r,g,b) as "r g b" only.</span>
        <span class="c1">// so we can get .ppm format again. (for the new Image)</span>
        <span class="nc">String</span> <span class="n">content</span> <span class="o">=</span> <span class="s">"P3\n"</span> <span class="o">+</span>
                         <span class="n">height</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">width</span> <span class="o">+</span>
                         <span class="s">"\n255\n"</span><span class="o">;</span> <span class="c1">// first three lines</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">content</span> <span class="o">+=</span> <span class="s">""</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">].</span><span class="na">r</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span>
                                <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">].</span><span class="na">g</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span>
                                <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">].</span><span class="na">b</span> <span class="o">+</span> <span class="s">" "</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">content</span> <span class="o">+=</span> <span class="s">"\n"</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">decider_by_threshold</span><span class="o">(</span><span class="kt">int</span> <span class="n">threshold</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// sends a boolean value to divide method in</span>
        <span class="c1">// QuadTree class to decide if it is necessary that</span>
        <span class="c1">// divide the current sub image (node) or not</span>

        <span class="kt">int</span> <span class="n">meanR</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">meanG</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">meanB</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">error</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="o">(</span><span class="n">i2</span><span class="o">-</span><span class="n">i1</span><span class="o">)*(</span><span class="n">j2</span><span class="o">-</span><span class="n">j1</span><span class="o">);</span>

        <span class="c1">// computing average of the square</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">i2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">j1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">j2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">Pixel</span> <span class="n">p</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
                <span class="n">meanR</span> <span class="o">+=</span> <span class="n">p</span><span class="o">.</span><span class="na">r</span><span class="o">;</span>
                <span class="n">meanG</span> <span class="o">+=</span> <span class="n">p</span><span class="o">.</span><span class="na">g</span><span class="o">;</span>
                <span class="n">meanB</span> <span class="o">+=</span> <span class="n">p</span><span class="o">.</span><span class="na">b</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">meanR</span> <span class="o">/=</span> <span class="n">area</span><span class="o">;</span>
        <span class="n">meanG</span> <span class="o">/=</span> <span class="n">area</span><span class="o">;</span>
        <span class="n">meanB</span> <span class="o">/=</span> <span class="n">area</span><span class="o">;</span>
        <span class="c1">// now mean color is rgb(meanR, meanG, meanB)</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">i2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">j1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">j2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">Pixel</span> <span class="n">p</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
                <span class="n">error</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">r</span> <span class="o">-</span> <span class="n">meanR</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
                <span class="n">error</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">g</span> <span class="o">-</span> <span class="n">meanG</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
                <span class="n">error</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">b</span> <span class="o">-</span> <span class="n">meanB</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">error</span> <span class="o">/=</span> <span class="n">area</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">error</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Image</span> <span class="nf">compress</span><span class="o">(</span><span class="nc">String</span> <span class="n">tree_data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">,</span> <span class="nc">String</span> <span class="n">output_file_name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// takes index data of the squares as big as possible according</span>
        <span class="c1">// to the threshold value aand fill them the mean color of the</span>
        <span class="c1">// pixels within</span>

        <span class="c1">// may be this piece of code is necessary, however it is</span>
        <span class="c1">// written that exactly 8 new images will be given as output.</span>
        <span class="c1">// so if the original image is small enough, it prints images</span>
        <span class="c1">// which have the same resolution.</span>
        <span class="cm">/*if (Math.pow(4, depth) == height)
            return this;*/</span>

        <span class="nc">Image</span> <span class="n">compressed</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Image</span><span class="o">(</span><span class="n">height</span><span class="o">,</span><span class="n">width</span><span class="o">);</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="n">tree_data</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">line</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">line</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">line</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">line</span><span class="o">]);</span>
            <span class="kt">int</span> <span class="n">i1</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">j1</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">i2</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">j2</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

            <span class="nc">Pixel</span> <span class="n">mean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">meanR</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">meanG</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">meanB</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">i2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">j1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">j2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="nc">Pixel</span> <span class="n">p</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
                    <span class="n">meanR</span> <span class="o">+=</span> <span class="n">p</span><span class="o">.</span><span class="na">r</span><span class="o">;</span>
                    <span class="n">meanG</span> <span class="o">+=</span> <span class="n">p</span><span class="o">.</span><span class="na">g</span><span class="o">;</span>
                    <span class="n">meanB</span> <span class="o">+=</span> <span class="n">p</span><span class="o">.</span><span class="na">b</span><span class="o">;</span>
                    <span class="n">count</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">meanR</span> <span class="o">/=</span> <span class="n">count</span><span class="o">;</span>
            <span class="n">meanG</span> <span class="o">/=</span> <span class="n">count</span><span class="o">;</span>
            <span class="n">meanB</span> <span class="o">/=</span> <span class="n">count</span><span class="o">;</span>
            <span class="n">mean</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">meanR</span><span class="o">;</span>
            <span class="n">mean</span><span class="o">.</span><span class="na">g</span> <span class="o">=</span> <span class="n">meanG</span><span class="o">;</span>
            <span class="n">mean</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">meanB</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">i2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">j1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">j2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">compressed</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">mean</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// to avoid null lines, I fill them black</span>
        <span class="c1">// if they exist</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">compressed</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
                    <span class="n">compressed</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">(</span><span class="mi">12</span><span class="o">,</span><span class="mi">12</span><span class="o">,</span><span class="mi">12</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">PrintWriter</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">output_file_name</span><span class="o">));</span>
            <span class="n">p</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">compressed</span><span class="o">.</span><span class="na">disturb</span><span class="o">());</span>
            <span class="n">p</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">compressed</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// optional part</span>
    <span class="kd">public</span> <span class="nc">Image</span> <span class="nf">edge_detection</span><span class="o">(</span><span class="nc">String</span> <span class="n">output_file_name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Image</span> <span class="n">sharpened</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Image</span><span class="o">(</span><span class="n">height</span><span class="o">,</span> <span class="n">width</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// for avoiding null pixels, I fill border pixels which</span>
            <span class="c1">// have not 8 neighbours, with black</span>

            <span class="c1">// border-top</span>
            <span class="n">sharpened</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
            <span class="c1">// border-left</span>
            <span class="n">sharpened</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
            <span class="c1">// border-right</span>
            <span class="n">sharpened</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
            <span class="c1">// border-bottom</span>
            <span class="n">sharpened</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">width</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">Pixel</span> <span class="n">pr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">();</span>   <span class="c1">// pixel of the new (sharpened) image</span>
                <span class="nc">Pixel</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">[</span><span class="mi">8</span><span class="o">];</span>
                <span class="nc">Pixel</span> <span class="n">old</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span> <span class="c1">// pixel of the old one</span>

                                          <span class="c1">// neighbours:</span>
                <span class="n">ar</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>   <span class="c1">// right</span>
                <span class="n">ar</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>   <span class="c1">// left</span>
                <span class="n">ar</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>   <span class="c1">// top</span>
                <span class="n">ar</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>   <span class="c1">// bottom</span>
                <span class="n">ar</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span> <span class="c1">// bottom-left</span>
                <span class="n">ar</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span> <span class="c1">// bottom-right</span>
                <span class="n">ar</span><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span> <span class="c1">// top-right</span>
                <span class="n">ar</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span> <span class="c1">// top-left</span>

                <span class="c1">// here there is a problem.</span>
                <span class="kt">boolean</span> <span class="n">different</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">different</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">k</span><span class="o">].</span><span class="na">r</span> <span class="o">-</span> <span class="n">old</span><span class="o">.</span><span class="na">r</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
                                <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">k</span><span class="o">].</span><span class="na">g</span> <span class="o">-</span> <span class="n">old</span><span class="o">.</span><span class="na">g</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
                                <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">k</span><span class="o">].</span><span class="na">b</span> <span class="o">-</span> <span class="n">old</span><span class="o">.</span><span class="na">b</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">different</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="mi">255</span><span class="o">;</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">g</span> <span class="o">=</span> <span class="mi">255</span><span class="o">;</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="mi">255</span><span class="o">;</span>
                    <span class="n">sharpened</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">pr</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">g</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="n">pr</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="n">sharpened</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">pr</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">PrintWriter</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">output_file_name</span><span class="o">));</span>
            <span class="n">p</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sharpened</span><span class="o">.</span><span class="na">disturb</span><span class="o">());</span>
            <span class="n">p</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">sharpened</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">display</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">format_is_P3</span><span class="o">)</span>
            <span class="n">display</span> <span class="o">+=</span> <span class="s">"P3\n"</span><span class="o">;</span>
        <span class="n">display</span> <span class="o">+=</span> <span class="s">"width: "</span> <span class="o">+</span> <span class="n">width</span> <span class="o">+</span> <span class="s">", "</span><span class="o">;</span>
        <span class="n">display</span> <span class="o">+=</span> <span class="s">"height: "</span> <span class="o">+</span> <span class="n">height</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
                <span class="n">display</span> <span class="o">+=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="s">" "</span><span class="o">;</span>
            <span class="n">display</span> <span class="o">+=</span> <span class="s">"\n"</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">display</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Pixel</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">r</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">g</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">b</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">j</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Pixel</span><span class="o">()</span> <span class="o">{</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="o">}</span>

        <span class="kd">public</span> <span class="nf">Pixel</span><span class="o">(</span><span class="kt">int</span> <span class="n">red</span><span class="o">,</span> <span class="kt">int</span> <span class="n">green</span><span class="o">,</span> <span class="kt">int</span> <span class="n">blue</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">red</span><span class="o">;</span>
            <span class="n">g</span> <span class="o">=</span> <span class="n">green</span><span class="o">;</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">blue</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nf">Pixel</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">,</span> <span class="kt">int</span> <span class="n">red</span><span class="o">,</span> <span class="kt">int</span> <span class="n">green</span><span class="o">,</span> <span class="kt">int</span> <span class="n">blue</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">red</span><span class="o">;</span>
            <span class="n">g</span> <span class="o">=</span> <span class="n">green</span><span class="o">;</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">blue</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
            <span class="c1">// coordinates</span>
            <span class="c1">// plus traditional rgb format color representation in CSS</span>
            <span class="c1">// for instance, first pixel black: [0,0] rgb(0,0,0)</span>
            <span class="k">return</span>  <span class="s">"["</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">"] "</span> <span class="o">+</span>
                    <span class="s">"rgb("</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">g</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="s">")"</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>







    <span class="c1">// from this point, there are some extra codes. Even if they are not</span>
    <span class="c1">// necessary for the task, I have learned a great deal from these.</span>
    <span class="c1">// If any, they were fun. They can be used later.</span>
    <span class="c1">//</span>
    <span class="c1">// greyscale and negative mean clear.</span>
    <span class="c1">// compress_half, compresses the image by size. it makes for instance</span>
    <span class="c1">// 512x512 image 256x256 while removing meaningful data of the</span>
    <span class="c1">// original file as minimum as possible.</span>


    <span class="kd">public</span> <span class="nc">Image</span> <span class="nf">greyscale</span><span class="o">(</span><span class="nc">String</span> <span class="n">output_file_name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Image</span> <span class="n">monochromatic</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Image</span><span class="o">(</span><span class="n">height</span><span class="o">,</span> <span class="n">width</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">Pixel</span> <span class="n">pm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">();</span>   <span class="c1">// pixel of the new (monochromatic) image</span>
                <span class="nc">Pixel</span> <span class="n">old</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span> <span class="c1">// pixel of the old one</span>
                <span class="n">pm</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="n">pm</span><span class="o">.</span><span class="na">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                <span class="n">pm</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="o">(</span><span class="n">old</span><span class="o">.</span><span class="na">r</span> <span class="o">+</span> <span class="n">old</span><span class="o">.</span><span class="na">g</span> <span class="o">+</span> <span class="n">old</span><span class="o">.</span><span class="na">b</span><span class="o">)</span> <span class="o">/</span> <span class="mi">3</span><span class="o">;</span>
                <span class="n">pm</span><span class="o">.</span><span class="na">g</span> <span class="o">=</span> <span class="o">(</span><span class="n">old</span><span class="o">.</span><span class="na">r</span> <span class="o">+</span> <span class="n">old</span><span class="o">.</span><span class="na">g</span> <span class="o">+</span> <span class="n">old</span><span class="o">.</span><span class="na">b</span><span class="o">)</span> <span class="o">/</span> <span class="mi">3</span><span class="o">;</span>
                <span class="n">pm</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="o">(</span><span class="n">old</span><span class="o">.</span><span class="na">r</span> <span class="o">+</span> <span class="n">old</span><span class="o">.</span><span class="na">g</span> <span class="o">+</span> <span class="n">old</span><span class="o">.</span><span class="na">b</span><span class="o">)</span> <span class="o">/</span> <span class="mi">3</span><span class="o">;</span>
                <span class="n">monochromatic</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">pm</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">PrintWriter</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">output_file_name</span><span class="o">));</span>
            <span class="n">p</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">monochromatic</span><span class="o">.</span><span class="na">disturb</span><span class="o">());</span>
            <span class="n">p</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">monochromatic</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Image</span> <span class="nf">negative</span><span class="o">(</span><span class="nc">String</span> <span class="n">output_file_name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Image</span> <span class="n">reversed</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Image</span><span class="o">(</span><span class="n">height</span><span class="o">,</span> <span class="n">width</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">Pixel</span> <span class="n">pr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">();</span>   <span class="c1">// pixel of the new (reversed) image</span>
                <span class="nc">Pixel</span> <span class="n">old</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span> <span class="c1">// pixel of the old one</span>
                <span class="n">pr</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="n">pr</span><span class="o">.</span><span class="na">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                <span class="n">pr</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="mi">255</span> <span class="o">-</span> <span class="n">old</span><span class="o">.</span><span class="na">r</span><span class="o">;</span>
                <span class="n">pr</span><span class="o">.</span><span class="na">g</span> <span class="o">=</span> <span class="mi">255</span> <span class="o">-</span> <span class="n">old</span><span class="o">.</span><span class="na">g</span><span class="o">;</span>
                <span class="n">pr</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="mi">255</span> <span class="o">-</span> <span class="n">old</span><span class="o">.</span><span class="na">b</span><span class="o">;</span>
                <span class="n">reversed</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">pr</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">PrintWriter</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">output_file_name</span><span class="o">));</span>
            <span class="n">p</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">reversed</span><span class="o">.</span><span class="na">disturb</span><span class="o">());</span>
            <span class="n">p</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">reversed</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Image</span> <span class="nf">compress_half</span><span class="o">(</span><span class="nc">String</span> <span class="n">index_data</span><span class="o">,</span> <span class="nc">String</span> <span class="n">output_file_name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 0 0 1 1  nw      4x4 image</span>
        <span class="c1">// 0 2 1 3  ne</span>
        <span class="c1">// 2 0 3 1  sw</span>
        <span class="c1">// 2 2 3 3  se</span>

        <span class="nc">Image</span> <span class="n">compressed</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Image</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">height</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">width</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">index_data</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="kt">int</span> <span class="n">ic</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(),</span>   <span class="c1">// i of the non-compressed</span>
                    <span class="n">jc</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>   <span class="c1">// j of the non-compressed</span>
            <span class="nc">Pixel</span> <span class="n">pc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pixel</span><span class="o">();</span> <span class="c1">// the new single one pixel of the compressed image</span>
            <span class="c1">// which is made as mixed of those quadruple of the</span>
            <span class="c1">// old one.</span>

            <span class="kt">int</span> <span class="n">newRed</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span><span class="o">][</span><span class="n">jc</span><span class="o">].</span><span class="na">r</span> <span class="o">+</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">jc</span><span class="o">].</span><span class="na">r</span> <span class="o">+</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span><span class="o">][</span><span class="n">jc</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">r</span> <span class="o">+</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">jc</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">r</span><span class="o">;</span>
            <span class="n">newRed</span> <span class="o">/=</span> <span class="mi">4</span><span class="o">;</span>

            <span class="kt">int</span> <span class="n">newGreen</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span><span class="o">][</span><span class="n">jc</span><span class="o">].</span><span class="na">g</span> <span class="o">+</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">jc</span><span class="o">].</span><span class="na">g</span> <span class="o">+</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span><span class="o">][</span><span class="n">jc</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">g</span> <span class="o">+</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">jc</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">g</span><span class="o">;</span>
            <span class="n">newGreen</span> <span class="o">/=</span> <span class="mi">4</span><span class="o">;</span>

            <span class="kt">int</span> <span class="n">newBlue</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span><span class="o">][</span><span class="n">jc</span><span class="o">].</span><span class="na">b</span> <span class="o">+</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">jc</span><span class="o">].</span><span class="na">b</span> <span class="o">+</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span><span class="o">][</span><span class="n">jc</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">b</span> <span class="o">+</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">ic</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">jc</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">b</span><span class="o">;</span>
            <span class="n">newBlue</span> <span class="o">/=</span> <span class="mi">4</span><span class="o">;</span>

            <span class="n">pc</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">newRed</span><span class="o">;</span>
            <span class="n">pc</span><span class="o">.</span><span class="na">g</span> <span class="o">=</span> <span class="n">newGreen</span><span class="o">;</span>
            <span class="n">pc</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">newBlue</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">newI</span> <span class="o">=</span> <span class="n">ic</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="c1">// i of the compressed</span>
                    <span class="n">newJ</span> <span class="o">=</span> <span class="n">jc</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// j of the compressed</span>
            <span class="n">pc</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">newI</span><span class="o">;</span>
            <span class="n">pc</span><span class="o">.</span><span class="na">j</span> <span class="o">=</span> <span class="n">newJ</span><span class="o">;</span>

            <span class="n">compressed</span><span class="o">.</span><span class="na">matrix</span><span class="o">[</span><span class="n">pc</span><span class="o">.</span><span class="na">i</span><span class="o">][</span><span class="n">pc</span><span class="o">.</span><span class="na">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">pc</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">PrintWriter</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">output_file_name</span><span class="o">));</span>
            <span class="n">p</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">compressed</span><span class="o">.</span><span class="na">disturb</span><span class="o">());</span>
            <span class="n">p</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">compressed</span><span class="o">;</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Drvier.java</strong> (<em>main class</em>):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Driver</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">input_file</span> <span class="o">=</span> <span class="s">""</span><span class="o">,</span> <span class="n">output_file</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"-i"</span><span class="o">))</span>
                <span class="n">input_file</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"-o"</span><span class="o">))</span>
                <span class="n">output_file</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="nc">Image</span> <span class="n">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Image</span><span class="o">(</span><span class="n">input_file</span><span class="o">);</span>
        <span class="nc">QuadTree</span> <span class="n">qt</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QuadTree</span><span class="o">(</span><span class="n">img</span><span class="o">);</span>

        <span class="c1">// takes threshold as parameter</span>
        <span class="n">qt</span><span class="o">.</span><span class="na">divide</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">output_file_name</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"-c"</span><span class="o">))</span> <span class="o">{</span>

                <span class="c1">// j values can be changed willingly</span>
                <span class="c1">// 0 is image itself, 1 appears 4 squares (node depths 1)</span>
                <span class="c1">// so on.</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">output_file_name</span> <span class="o">=</span> <span class="n">output_file</span> <span class="o">+</span> <span class="s">"-"</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">".ppm"</span><span class="o">;</span>
                    <span class="c1">// takes time</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Processing... Please wait"</span><span class="o">);</span>
                    <span class="n">qt</span><span class="o">.</span><span class="na">compress</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">output_file_name</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Process finished succesfully."</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"-e"</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Processing... Please wait"</span><span class="o">);</span>
                <span class="n">img</span><span class="o">.</span><span class="na">edge_detection</span><span class="o">(</span><span class="n">output_file</span> <span class="o">+</span> <span class="s">".ppm"</span><span class="o">);</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Process finished succesfully."</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET